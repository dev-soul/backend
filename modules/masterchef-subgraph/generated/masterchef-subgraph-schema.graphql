"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
    number_gte: Int!
}

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

scalar Bytes

type MasterChef {
    block: BigInt!
    embrPerSec: BigInt!
    id: ID!
    poolCount: BigInt!
    pools(
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: Pool_filter
    ): [Pool!]
    timestamp: BigInt!
    totalAllocPoint: BigInt!
}

input MasterChef_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    embrPerSec: BigInt
    embrPerSec_gt: BigInt
    embrPerSec_gte: BigInt
    embrPerSec_in: [BigInt!]
    embrPerSec_lt: BigInt
    embrPerSec_lte: BigInt
    embrPerSec_not: BigInt
    embrPerSec_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    poolCount: BigInt
    poolCount_gt: BigInt
    poolCount_gte: BigInt
    poolCount_in: [BigInt!]
    poolCount_lt: BigInt
    poolCount_lte: BigInt
    poolCount_not: BigInt
    poolCount_not_in: [BigInt!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    totalAllocPoint: BigInt
    totalAllocPoint_gt: BigInt
    totalAllocPoint_gte: BigInt
    totalAllocPoint_in: [BigInt!]
    totalAllocPoint_lt: BigInt
    totalAllocPoint_lte: BigInt
    totalAllocPoint_not: BigInt
    totalAllocPoint_not_in: [BigInt!]
}

enum MasterChef_orderBy {
    block
    embrPerSec
    id
    poolCount
    pools
    timestamp
    totalAllocPoint
}

type Migrations {
    block: BigInt!
    claimed: BigInt!
    id: ID!
    timestamp: BigInt!
    unclaimed: BigInt!
}

input Migrations_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    claimed: BigInt
    claimed_gt: BigInt
    claimed_gte: BigInt
    claimed_in: [BigInt!]
    claimed_lt: BigInt
    claimed_lte: BigInt
    claimed_not: BigInt
    claimed_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    unclaimed: BigInt
    unclaimed_gt: BigInt
    unclaimed_gte: BigInt
    unclaimed_in: [BigInt!]
    unclaimed_lt: BigInt
    unclaimed_lte: BigInt
    unclaimed_not: BigInt
    unclaimed_not_in: [BigInt!]
}

enum Migrations_orderBy {
    block
    claimed
    id
    timestamp
    unclaimed
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
    asc
    desc
}

type Pool {
    accEmbrPerShare: BigInt!
    allocPoint: BigInt!
    block: BigInt!
    id: ID!
    lastRewardBlock: BigInt!
    masterChef: MasterChef!
    pair: Bytes!
    rewarder: Rewarder
    slpBalance: BigInt!
    timestamp: BigInt!
    userCount: BigInt!
    users(
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: User_filter
    ): [User!]!
}

input Pool_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    accEmbrPerShare: BigInt
    accEmbrPerShare_gt: BigInt
    accEmbrPerShare_gte: BigInt
    accEmbrPerShare_in: [BigInt!]
    accEmbrPerShare_lt: BigInt
    accEmbrPerShare_lte: BigInt
    accEmbrPerShare_not: BigInt
    accEmbrPerShare_not_in: [BigInt!]
    allocPoint: BigInt
    allocPoint_gt: BigInt
    allocPoint_gte: BigInt
    allocPoint_in: [BigInt!]
    allocPoint_lt: BigInt
    allocPoint_lte: BigInt
    allocPoint_not: BigInt
    allocPoint_not_in: [BigInt!]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    lastRewardBlock: BigInt
    lastRewardBlock_gt: BigInt
    lastRewardBlock_gte: BigInt
    lastRewardBlock_in: [BigInt!]
    lastRewardBlock_lt: BigInt
    lastRewardBlock_lte: BigInt
    lastRewardBlock_not: BigInt
    lastRewardBlock_not_in: [BigInt!]
    masterChef: String
    masterChef_contains: String
    masterChef_contains_nocase: String
    masterChef_ends_with: String
    masterChef_ends_with_nocase: String
    masterChef_gt: String
    masterChef_gte: String
    masterChef_in: [String!]
    masterChef_lt: String
    masterChef_lte: String
    masterChef_not: String
    masterChef_not_contains: String
    masterChef_not_contains_nocase: String
    masterChef_not_ends_with: String
    masterChef_not_ends_with_nocase: String
    masterChef_not_in: [String!]
    masterChef_not_starts_with: String
    masterChef_not_starts_with_nocase: String
    masterChef_starts_with: String
    masterChef_starts_with_nocase: String
    pair: Bytes
    pair_contains: Bytes
    pair_in: [Bytes!]
    pair_not: Bytes
    pair_not_contains: Bytes
    pair_not_in: [Bytes!]
    rewarder: String
    rewarder_contains: String
    rewarder_contains_nocase: String
    rewarder_ends_with: String
    rewarder_ends_with_nocase: String
    rewarder_gt: String
    rewarder_gte: String
    rewarder_in: [String!]
    rewarder_lt: String
    rewarder_lte: String
    rewarder_not: String
    rewarder_not_contains: String
    rewarder_not_contains_nocase: String
    rewarder_not_ends_with: String
    rewarder_not_ends_with_nocase: String
    rewarder_not_in: [String!]
    rewarder_not_starts_with: String
    rewarder_not_starts_with_nocase: String
    rewarder_starts_with: String
    rewarder_starts_with_nocase: String
    slpBalance: BigInt
    slpBalance_gt: BigInt
    slpBalance_gte: BigInt
    slpBalance_in: [BigInt!]
    slpBalance_lt: BigInt
    slpBalance_lte: BigInt
    slpBalance_not: BigInt
    slpBalance_not_in: [BigInt!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    userCount: BigInt
    userCount_gt: BigInt
    userCount_gte: BigInt
    userCount_in: [BigInt!]
    userCount_lt: BigInt
    userCount_lte: BigInt
    userCount_not: BigInt
    userCount_not_in: [BigInt!]
}

enum Pool_orderBy {
    accEmbrPerShare
    allocPoint
    block
    id
    lastRewardBlock
    masterChef
    pair
    rewarder
    slpBalance
    timestamp
    userCount
    users
}

type Query {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    masterChef(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): MasterChef
    masterChefs(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: MasterChef_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: MasterChef_filter
    ): [MasterChef!]!
    migrations(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Migrations_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Migrations_filter
    ): [Migrations!]!
    pool(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Pool
    pools(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Pool_filter
    ): [Pool!]!
    rewarder(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Rewarder
    rewarders(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Rewarder_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Rewarder_filter
    ): [Rewarder!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
}

type Rewarder {
    block: BigInt!
    id: ID!
    rewardPerSecond: BigInt!
    rewardToken: Bytes!
    timestamp: BigInt!
}

input Rewarder_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    rewardPerSecond: BigInt
    rewardPerSecond_gt: BigInt
    rewardPerSecond_gte: BigInt
    rewardPerSecond_in: [BigInt!]
    rewardPerSecond_lt: BigInt
    rewardPerSecond_lte: BigInt
    rewardPerSecond_not: BigInt
    rewardPerSecond_not_in: [BigInt!]
    rewardToken: Bytes
    rewardToken_contains: Bytes
    rewardToken_in: [Bytes!]
    rewardToken_not: Bytes
    rewardToken_not_contains: Bytes
    rewardToken_not_in: [Bytes!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
}

enum Rewarder_orderBy {
    block
    id
    rewardPerSecond
    rewardToken
    timestamp
}

type Subscription {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    masterChef(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): MasterChef
    masterChefs(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: MasterChef_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: MasterChef_filter
    ): [MasterChef!]!
    migrations(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Migrations_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Migrations_filter
    ): [Migrations!]!
    pool(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Pool
    pools(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Pool_filter
    ): [Pool!]!
    rewarder(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Rewarder
    rewarders(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Rewarder_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Rewarder_filter
    ): [Rewarder!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
}

type User {
    address: Bytes!
    amount: BigInt!
    block: BigInt!
    embrHarvested: BigInt!
    id: ID!
    pool: Pool
    rewardDebt: BigInt!
    timestamp: BigInt!
}

input User_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    address: Bytes
    address_contains: Bytes
    address_in: [Bytes!]
    address_not: Bytes
    address_not_contains: Bytes
    address_not_in: [Bytes!]
    amount: BigInt
    amount_gt: BigInt
    amount_gte: BigInt
    amount_in: [BigInt!]
    amount_lt: BigInt
    amount_lte: BigInt
    amount_not: BigInt
    amount_not_in: [BigInt!]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    embrHarvested: BigInt
    embrHarvested_gt: BigInt
    embrHarvested_gte: BigInt
    embrHarvested_in: [BigInt!]
    embrHarvested_lt: BigInt
    embrHarvested_lte: BigInt
    embrHarvested_not: BigInt
    embrHarvested_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    pool: String
    pool_contains: String
    pool_contains_nocase: String
    pool_ends_with: String
    pool_ends_with_nocase: String
    pool_gt: String
    pool_gte: String
    pool_in: [String!]
    pool_lt: String
    pool_lte: String
    pool_not: String
    pool_not_contains: String
    pool_not_contains_nocase: String
    pool_not_ends_with: String
    pool_not_ends_with_nocase: String
    pool_not_in: [String!]
    pool_not_starts_with: String
    pool_not_starts_with_nocase: String
    pool_starts_with: String
    pool_starts_with_nocase: String
    rewardDebt: BigInt
    rewardDebt_gt: BigInt
    rewardDebt_gte: BigInt
    rewardDebt_in: [BigInt!]
    rewardDebt_lt: BigInt
    rewardDebt_lte: BigInt
    rewardDebt_not: BigInt
    rewardDebt_not_in: [BigInt!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
}

enum User_orderBy {
    address
    amount
    block
    embrHarvested
    id
    pool
    rewardDebt
    timestamp
}

type _Block_ {
    """
    The hash of the block
    """
    hash: Bytes

    """
    The block number
    """
    number: Int!
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
    """
    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!

    """
    The deployment ID
    """
    deployment: String!

    """
    If `true`, the subgraph encountered indexing errors at some past block
    """
    hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
    """
    Data will be returned even if the subgraph has indexing errors
    """
    allow

    """
    If the subgraph has indexing errors, data will be omitted. The default.
    """
    deny
}
